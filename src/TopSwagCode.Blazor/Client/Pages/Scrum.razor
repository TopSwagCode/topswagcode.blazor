@page "/scrum"
@using System.Security.Claims
@using TopSwagCode.Blazor.Shared
@attribute [Authorize(Roles = "Admin")]
@inject LocalHttpClient LocalClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Scrum Page</PageTitle>

<Divider Orientation="left">Scrum page</Divider>


<Transfer DataSource="dataSource"
          TargetKeys="targetKeys.ToArray()"
          ShowSearch="true"
          SelectedKeys="selectedKeys"
          Titles="titles"
          OnChange="OnChange"
          OnSearch="OnSearch"
          OnScroll="OnScroll"
          OnSelectChange="OnSelectChange"
          Style="width:300px;height:300px;">
</Transfer>

<Divider Orientation="left">Entire scrum team</Divider>

<AntList Bordered DataSource="@ScrumTeamMembers">
    <ChildContent Context="item">
        <ListItem>
            <span><Text Code>@item.Name</Text></span>"Timer for user"
        </ListItem>
    </ChildContent>
</AntList>

<Divider Orientation="left">Timer test</Divider>

<Button OnClick="(async () => { StopSwatch(); })">Start</Button>

<Button>Pause</Button>

<Button>Resume</Button>

<Button>Stop</Button>

<Text>@stopwatchValue</Text>




@code {
    private List<TransferItem> dataSource = new List<TransferItem>();
    private List<string> targetKeys = new List<string>();
    private string[] selectedKeys = Array.Empty<string>();
    private string[] titles = { "Team", "Attendee" };
    private bool Disabled = false;
    private List<ScrumTeamMember> ScrumTeamMembers = new();

    private string timerText = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var teamMembers = await LocalClient.HttpClient.GetFromJsonAsync<ScrumTeamMember[]>("api/scrum/");

            if (teamMembers == null) return;

            ScrumTeamMembers = teamMembers.ToList();

            targetKeys.AddRange(teamMembers.Select(x => x.Uid.ToString()));

            dataSource.AddRange(teamMembers.Select(x => new TransferItem()
            {
                Description = "",
                Title = x.Name,
                Key = x.Uid.ToString(),
            }));

            //_loading = false;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        StateHasChanged();
        base.OnInitialized();
    }

    TimeSpan stopwatchValue = new TimeSpan();
    bool isStopwatchRunning = false;

    async Task StopSwatch()
    {
        isStopwatchRunning = true;
        Console.WriteLine("HelloHello");

        while (isStopwatchRunning)
        {
            await Task.Delay(1000);

            if (isStopwatchRunning)
            {
                Console.WriteLine("NoNoNo");
                stopwatchValue = stopwatchValue.Add(new TimeSpan(0, 0, 1));
                StateHasChanged();
            }
        }
    }

    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)
    {
        //return new RenderFragment(buildTree);
        //return $"{item.Title} - {item.Description}";
        return $"{item.Title}";
    }

    private void OnChange(TransferChangeArgs e)
    {
        Console.WriteLine(e.Direction);
        Console.WriteLine($"MoveKeys:{string.Join(',', e.MoveKeys)}");
        Console.WriteLine($"TargetKeys:{string.Join(',', e.TargetKeys)}");
    }

    private void OnSearch(TransferSearchArgs e)
    {
        Console.WriteLine(e.Direction);
        Console.WriteLine(e.Value);
    }

    private void OnScroll(TransferScrollArgs e)
    {
        Console.WriteLine(e.Direction);
    }

    private void OnSelectChange(TransferSelectChangeArgs e)
    {
        Console.WriteLine($"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}");
        Console.WriteLine($"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}");
    }
}